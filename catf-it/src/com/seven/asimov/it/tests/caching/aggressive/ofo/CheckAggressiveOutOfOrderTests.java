package com.seven.asimov.it.tests.caching.aggressive.ofo;import android.test.suitebuilder.annotation.LargeTest;import com.seven.asimov.it.annotation.DeviceOnly;import android.util.Log;import com.seven.asimov.it.base.HttpRequest;import com.seven.asimov.it.base.TcpDumpTestCase;import com.seven.asimov.it.utils.IpTablesUtil;import com.seven.asimov.it.utils.MobileNetworkUtil;import com.seven.asimov.it.utils.ScreenUtils;import com.seven.asimov.it.utils.pms.Policy;import static com.seven.asimov.it.utils.PrepareResourceUtil.invalidateResourceSafely;import static com.seven.asimov.it.utils.PrepareResourceUtil.prepareResource;import static com.seven.asimov.it.utils.TestUtil.switchRadioUpStart;import static com.seven.asimov.it.utils.TestUtil.switchRadioUpStop;import static com.seven.asimov.it.utils.pms.PMSUtil.addPoliciesWithCheck;import static com.seven.asimov.it.utils.pms.PMSUtil.cleanPaths;/** * Check Aggressive Out-Of-Order Tests: ({@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_0_RiScreenOnRadioUp() Test 1}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_0_RiScreenOffRadioDown() Test 2}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_0_RiScreenOnRadioDown() Test 3}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_0_RiScreenOffRadioUp() Test 4}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_1_RiScreenOffRadioDown() Test 5}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_1_RiScreenOnRadioDown() Test 6}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_1_RiScreenOffRadioUp() Test 7}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_1_RiScreenOnRadioUp() Test 8}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_2_RiScreenOnRadioUp() Test 9}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_2_RiScreenOffRadioDown() Test 10} * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_2_RiScreenOnRadioDown() Test 11}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_2_RiScreenOffRadioUp() Test 12}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_3_RiScreenOnRadioUp() Test 13}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_3_RiScreenOffRadioDown() Test 14}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_3_RiScreenOnRadioDown() Test 15}, * {@link CheckAggressiveOutOfOrderTests#testAggressiveOutOfOrder_3_RiScreenOffRadioUp() Test 16}) */public class CheckAggressiveOutOfOrderTests extends TcpDumpTestCase {    private static final String AGGRESSIVENESS_REST_PROPERTY_PATH = "@asimov@http";    private static final String AGGRESSIVENESS_REST_PROPERTY_NAME = "out_of_order_aggressiveness";    private static final String TAG = CheckAggressiveOutOfOrderTests.class.getSimpleName();    private static final String AGGRESSIVENESS_LEVEL_0 = String.valueOf(0);    private static final String AGGRESSIVENESS_LEVEL_1 = String.valueOf(1);    private static final String AGGRESSIVENESS_LEVEL_2 = String.valueOf(2);    private static final String AGGRESSIVENESS_LEVEL_3 = String.valueOf(3);    private static final int TIMING = (int) MIN_NON_RMP_PERIOD;    private static final String IWC_0_RI_SCREEN_ON_RADIO_UP = "outoforder_0_ri_screen_on_radio_up";    private static final String IWC_0_RI_SCREEN_ON_RADIO_DOWN = "outoforder_0_ri_screen_on_radio_down";    private static final String IWC_0_RI_SCREEN_OFF_RADIO_UP = "outoforder_0_ri_screen_off_radio_up";    private static final String IWC_0_RI_SCREEN_OFF_RADIO_DOWN = "outoforder_0_ri_screen_off_radio_down";    private static final String IWC_1_RI_SCREEN_ON_RADIO_UP = "outoforder_1_ri_screen_on_radio_up";    private static final String IWC_1_RI_SCREEN_ON_RADIO_DOWN = "outoforder_1_ri_screen_on_radio_down";    private static final String IWC_1_RI_SCREEN_OFF_RADIO_UP = "outoforder_1_ri_screen_off_radio_up";    private static final String IWC_1_RI_SCREEN_OFF_RADIO_DOWN = "outoforder_1_ri_screen_off_radio_down";    private static final String IWC_2_RI_SCREEN_ON_RADIO_UP = "outoforder_2_ri_screen_on_radio_up";    private static final String IWC_2_RI_SCREEN_ON_RADIO_DOWN = "outoforder_2_ri_screen_on_radio_down";    private static final String IWC_2_RI_SCREEN_OFF_RADIO_UP = "outoforder_2_ri_screen_off_radio_up";    private static final String IWC_2_RI_SCREEN_OFF_RADIO_DOWN = "outoforder_2_ri_screen_off_radio_down";    private static final String IWC_3_RI_SCREEN_ON_RADIO_UP = "outoforder_3_ri_screen_on_radio_up";    private static final String IWC_3_RI_SCREEN_ON_RADIO_DOWN = "outoforder_3_ri_screen_on_radio_down";    private static final String IWC_3_RI_SCREEN_OFF_RADIO_UP = "outoforder_3_ri_screen_off_radio_up";    private static final String IWC_3_RI_SCREEN_OFF_RADIO_DOWN = "outoforder_3_ri_screen_off_radio_down";    /**     * <h1>Testing aggressiveness level 0 with screen ON and radio UP.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveOutOfOrder_0_RiScreenOnRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_0_RI_SCREEN_ON_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");;        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_0, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 0 with screen OFF and radio DOWN.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_0_RiScreenOffRadioDown() throws Throwable {        MobileNetworkUtil mobileNetworkHelper = MobileNetworkUtil.init(getContext());        mobileNetworkHelper.on3gOnly();        logSleeping(60 * 1000);        final String uri = createTestResourceUri(IWC_0_RI_SCREEN_OFF_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_0, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 0 with screen ON and radio DOWN.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_0_RiScreenOnRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_0_RI_SCREEN_ON_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_0, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 0 with screen OFF and radio UP.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveOutOfOrder_0_RiScreenOffRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_0_RI_SCREEN_OFF_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_0, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 1 with screen OFF and radio DOWN.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_1_RiScreenOffRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_1_RI_SCREEN_OFF_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_1, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 1 with screen ON and radio DOWN.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_1_RiScreenOnRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_1_RI_SCREEN_ON_RADIO_DOWN);        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_1, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 1 with screen OFF and radio UP.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_1_RiScreenOffRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_1_RI_SCREEN_OFF_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_1, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 1 with screen ON and radio UP.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_1_RiScreenOnRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_1_RI_SCREEN_ON_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_1, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 2 with screen ON and radio UP.</h1>     * <p>The test checks that 5 response will be MISS.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be MISS</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_2_RiScreenOnRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_2_RI_SCREEN_ON_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_2, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) MISS            checkMiss(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 2 with screen OFF and radio DOWN.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_2_RiScreenOffRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_2_RI_SCREEN_OFF_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_2, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 2 with screen ON and radio DOWN.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_2_RiScreenOnRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_2_RI_SCREEN_ON_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_2, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 2 with screen OFF and radio UP.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_2_RiScreenOffRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_2_RI_SCREEN_OFF_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_2, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 3 with screen ON and radio UP.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_3_RiScreenOnRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_3_RI_SCREEN_ON_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_3, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }    /**     * <h1>Testing aggressiveness level 3 with screen OFF and radio DOWN.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_3_RiScreenOffRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_3_RI_SCREEN_OFF_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_3, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 3 with screen ON and radio DOWN.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_3_RiScreenOnRadioDown() throws Throwable {        final String uri = createTestResourceUri(IWC_3_RI_SCREEN_ON_RADIO_DOWN);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_3, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), true);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);        }    }    /**     * <h1>Testing aggressiveness level 3 with screen OFF and radio UP.</h1>     * <p>The test checks that 5 response will be HIT.</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>MISS, get response immediately, sleep on 65 seconds</li>     * <li>HIT, get response immediately, sleep on 45 seconds</li>     * <li>MISS or HIT depends on aggressiveness level, radio and screen states. For this test it has to be HIT</li>     * </ol>     *     * @throws Throwable     */    @DeviceOnly    @LargeTest    public void testAggressiveOutOfOrder_3_RiScreenOffRadioUp() throws Throwable {        final String uri = createTestResourceUri(IWC_3_RI_SCREEN_OFF_RADIO_UP);        final int csa = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov");        final int csat = IpTablesUtil.getApplicationUid(getContext(), "com.seven.asimov.it");        try {            IpTablesUtil.banNetworkForAllApplications(true);            IpTablesUtil.allowNetworkForApplication(true, csa);            IpTablesUtil.allowNetworkForApplication(true, csat);            // setup & check policy            Log.d(TAG, "before policy");            final Policy aggressive = new Policy(AGGRESSIVENESS_REST_PROPERTY_NAME, AGGRESSIVENESS_LEVEL_3, AGGRESSIVENESS_REST_PROPERTY_PATH, true);            addPoliciesWithCheck(new Policy[]{aggressive});            Log.d(TAG, "after policy update");            // prepare resources due polices            ScreenUtils.ScreenSpyResult spy = ScreenUtils.switchScreenAndSpy(getContext(), false);            assertTrue("Screen off ( ", spy.isScreenAsExpected());            switchRadioUpStart();            // check out of order            final HttpRequest request = createRequest().setUri(uri)                    .setMethod("GET").addHeaderField("X-OC-ContentEncoding", "identity").getRequest();            prepareResource(uri, false);            int requestId = 1;            Log.d(TAG, "before first request");            // (1) MISS            checkMiss(request, requestId++, TIMING);            // (2) MISS            checkMiss(request, requestId++, TIMING);            // (3) MISS            checkMiss(request, requestId++, TIMING);            // (4) HIT            checkHit(request, requestId++, 45 * 1000);            Log.d(TAG, "before last request");            // (5) HIT            checkHit(request, requestId++);        } finally {            IpTablesUtil.banNetworkForAllApplications(false);            IpTablesUtil.allowNetworkForApplication(false, csa);            IpTablesUtil.allowNetworkForApplication(false, csat);            cleanPaths(new String[]{AGGRESSIVENESS_REST_PROPERTY_PATH});            invalidateResourceSafely(uri);            switchRadioUpStop();        }    }}