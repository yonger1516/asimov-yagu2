package com.seven.asimov.it.tests.caching.polling.rmp;import android.test.suitebuilder.annotation.LargeTest;import com.seven.asimov.it.annotation.Ignore;import com.seven.asimov.it.base.HttpRequest;import com.seven.asimov.it.base.HttpResponse;import com.seven.asimov.it.base.TestCaseThread;import com.seven.asimov.it.testcases.RmpTestCase;import com.seven.asimov.it.utils.PrepareResourceUtil;import com.seven.asimov.it.utils.TimeSetterUtil;import org.apache.http.HttpStatus;import org.apache.http.client.methods.HttpPost;import java.util.ArrayList;import java.util.Arrays;import java.util.List;public class RmpTests extends RmpTestCase {    public static long MIN_RMP_CACHING_PERIOD = 5000L;    @LargeTest    public void test_001_RmpWithDifferentCacheSettings() throws Throwable {        final long sleepTime = 20 * 1000;        String link1 = "http://www.httpwatch.com/httpgallery/caching/imageA/";        String link2 = "http://www.httpwatch.com/httpgallery/caching/imageB/";        String link3 = "http://www.httpwatch.com/httpgallery/caching/imageC/";        String link4 = "http://www.httpwatch.com/httpgallery/caching/imageD/";        final HttpRequest request1 = createRequest()                .setUri(link1)                .setMethod("GET")                .addHeaderField("Accept", "image/png,image/*;q=0.8,*/*;q=0.5")                .addHeaderField("Accept-Encoding", "gzip, deflate")                .addHeaderField("Cache-Control", "no-cache")                .addHeaderField(                        "Cookie",                        "__utma=1.1353845118.1327314935.1327314935.1327314935.1; __utmb=1.4.10.1327314935; __utmc=1; __utmz=1.1327314935.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)")                .addHeaderField("Pragma", "no-cache").getRequest();        final HttpRequest request2 = createRequest()                .setUri(link2)                .setMethod("GET")                .addHeaderField("Accept", "image/png,image/*;q=0.8,*/*;q=0.5")                .addHeaderField("Accept-Encoding", "gzip, deflate")                .addHeaderField("Cache-Control", "no-cache")                .addHeaderField(                        "Cookie",                        "__utma=1.1353845118.1327314935.1327314935.1327314935.1; __utmb=1.4.10.1327314935; __utmc=1; __utmz=1.1327314935.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)")                .addHeaderField("Pragma", "no-cache").getRequest();        final HttpRequest request3 = createRequest()                .setUri(link3)                .setMethod("GET")                .addHeaderField("Accept", "image/png,image/*;q=0.8,*/*;q=0.5")                .addHeaderField("Accept-Encoding", "gzip, deflate")                .addHeaderField("Cache-Control", "no-cache")                .addHeaderField(                        "Cookie",                        "__utma=1.1353845118.1327314935.1327314935.1327314935.1; __utmb=1.4.10.1327314935; __utmc=1; __utmz=1.1327314935.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)")                .addHeaderField("Pragma", "no-cache").getRequest();        final HttpRequest request4 = createRequest()                .setUri(link4)                .setMethod("GET")                .addHeaderField("Accept", "image/png,image/*;q=0.8,*/*;q=0.5")                .addHeaderField("Accept-Encoding", "gzip, deflate")                .addHeaderField("Cache-Control", "no-cache")                .addHeaderField(                        "Cookie",                        "__utma=1.1353845118.1327314935.1327314935.1327314935.1; __utmb=1.4.10.1327314935; __utmc=1; __utmz=1.1327314935.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)")                .addHeaderField("Pragma", "no-cache").getRequest();        int totalResponseDuration = 0;        int requestId1 = 10;        int requestId2 = 20;        int requestId3 = 30;        int requestId4 = 40;        // first queue        logInfo("First queue");        // 1.1        HttpResponse response = checkMiss(request1, ++requestId1);        totalResponseDuration += response.getDuration();        // 1.2        response = checkMiss(request2, ++requestId2);        totalResponseDuration += response.getDuration();        // 1.3        response = checkMiss(request3, ++requestId3);        totalResponseDuration += response.getDuration();        // 1.4        response = checkMiss(request4, ++requestId4);        totalResponseDuration += response.getDuration();        logSleeping(sleepTime - totalResponseDuration);        // second queue        logInfo("Second queue");        totalResponseDuration = 0;        // 1.1        response = checkMiss(request1, ++requestId1);        totalResponseDuration += response.getDuration();        // 1.2        response = checkMiss(request2, ++requestId2);        totalResponseDuration += response.getDuration();        // 1.3        response = checkMiss(request3, ++requestId3);        totalResponseDuration += response.getDuration();        // 1.4        response = checkMiss(request4, ++requestId4);        totalResponseDuration += response.getDuration();        logSleeping(sleepTime - totalResponseDuration);        // third queue        logInfo("Third queue");        // these requests shall be cached        totalResponseDuration = 0;        // 1.1        response = checkMiss(request1, ++requestId1);        totalResponseDuration += response.getDuration();        // 1.2        response = checkMiss(request2, ++requestId2);        totalResponseDuration += response.getDuration();        // 1.3        response = checkMiss(request3, ++requestId3);        totalResponseDuration += response.getDuration();        // 1.4        response = checkMiss(request4, ++requestId4);        totalResponseDuration += response.getDuration();        long start = System.currentTimeMillis();        long delay = System.currentTimeMillis() - start;        logSleeping(sleepTime - totalResponseDuration - delay);        // fourth queue        logInfo("Fourth queue");        // these requests shall be returned from cache        totalResponseDuration = 0;        // 1.1        response = checkHit(request1, ++requestId1);        totalResponseDuration += response.getDuration();        // 1.2        response = checkHit(request2, ++requestId2);        totalResponseDuration += response.getDuration();        // 1.3        response = checkHit(request3, ++requestId3);        totalResponseDuration += response.getDuration();        // 1.4        response = checkHit(request4, ++requestId4);        totalResponseDuration += response.getDuration();        // Sleep for 180 seconds for Cache entry to expire.        logSleeping(180 * 1000 - totalResponseDuration);        // fifth queue        logInfo("Fifth queue");        // 1.1        checkMiss(request1, ++requestId1);        // 1.2        checkMiss(request2, ++requestId2);        // 1.3        checkMiss(request3, ++requestId3);        // 1.4        checkMiss(request4, ++requestId4);    }    @LargeTest    public void test_002_RapidPollingThreeThread() throws Throwable {        final String RESOURCE_URI = "production_asimov_it_cv_12002";        final String SECOND_RESOURCE_URI = "production_asimov_it_cv_12001";        final String THIRD_RESOURCE_URI = "production_asimov_it_cv_12000";        String uri1 = createTestResourceUri(RESOURCE_URI);        PrepareResourceUtil.prepareResource(uri1, false);        final HttpRequest request = createRequest()                .setUri(uri1)                .setMethod("GET")                .addHeaderField("Referer", "http://" + TEST_RESOURCE_HOST + "/asimov_it_cv_rmp_non_cacheable_header_fields")                .addHeaderField("Accept", "image/png,image/*;q=0.8,*/*;q=0.5")                .addHeaderField("Accept-Encoding", "gzip, deflate")                .addHeaderField("Accept-Language", "ru,uk;q=0.8,en-us;q=0.5,en;q=0.3")                .addHeaderField("Cache-Control", "max-age=0")                .addHeaderField("Cookie", "__utma=1.1353845118.1327314935.1327314935.1327314935.1; __utmb=1.3.10.1327314935; __utmc=1; __utmz=1.1327314935.1.1.utmcsr=(direct)|utmccn=(direct)|utmcmd=(none)")                .getRequest();        TestCaseThread t1 = new TestCaseThread() {            @Override            public void run() throws Throwable {                setThreadName("1");                send4RequestRmp(request);            }        };        String uri2 = createTestResourceUri(SECOND_RESOURCE_URI);        PrepareResourceUtil.prepareResource(uri2, false);        final HttpRequest request2 = createRequest().setUri(uri2).setMethod("GET").getRequest();        TestCaseThread t2 = new TestCaseThread() {            @Override            public void run() throws Throwable {                setThreadName("2");                send4RequestRmp(request2);            }        };        String uri3 = createTestResourceUri(THIRD_RESOURCE_URI);        PrepareResourceUtil.prepareResource(uri3, false);        final HttpRequest request3 = createRequest().setUri(uri3).setMethod("GET").getRequest();        TestCaseThread t3 = new TestCaseThread() {            @Override            public void run() throws Throwable {                setThreadName("3");                send4RequestRmp(request3);            }        };        try {            executeThreads(t1, t2, t3);            addCheckSocketCount(0, 9);        } finally {            // invalidate resource to stop server polling            logInfo("Ivalidating resource");            PrepareResourceUtil.prepareResource(uri1, true);            PrepareResourceUtil.prepareResource(uri2, true);            PrepareResourceUtil.prepareResource(uri3, true);        }    }    @LargeTest    public void test_003_StressPollingProduction() throws Throwable {        final String RESOURCE_URI = "production_asimov_it_cv_0008";        long sleepTime = 50 * 1000;        String uri = createTestResourceUri(RESOURCE_URI);        PrepareResourceUtil.prepareResource(uri, false);        final HttpRequest request = createRequest().setUri(uri)                .setMethod("GET").getRequest();        try {            int requestId = 0;            // 1.1            HttpResponse response = checkMiss(request, ++requestId,                    VALID_RESPONSE);            logSleeping(sleepTime - response.getDuration());            // 1.2            response = checkMiss(request, ++requestId, VALID_RESPONSE);            logSleeping(sleepTime - response.getDuration());            // 1.3 this request shall be cached            response = checkMiss(request, ++requestId, VALID_RESPONSE);            logSleeping(sleepTime - response.getDuration());            // 1.4 this request shall be returned from cache            response = checkHit(request, ++requestId, VALID_RESPONSE);            logSleeping(sleepTime - response.getDuration());            final HttpRequest request2 = createRequest().setUri(uri)                    .setMethod("GET")                    .addHeaderField("X-OC-ContentEncoding", "identity")                    .addHeaderField("X-Requested-With", "XMLHttpRequest")                    .getRequest();            // 1.5 it should be returned from network            response = checkMiss(request2, ++requestId, VALID_RESPONSE);            logSleeping(sleepTime - response.getDuration());            // 1.6 it should be returned from cache like Continue Polling            checkHit(request, ++requestId, VALID_RESPONSE);        } finally {            // invalidate resource to stop server polling            logInfo("Ivalidating resource");            PrepareResourceUtil.prepareResource(uri, true);        }    }    // Response status codes polled by LA    private static final List<Integer> polledByLA = new ArrayList<Integer>(Arrays.asList(301, 302, 303, 304, 307, 500));    @LargeTest    public void test_004_3xxStatusCodes() throws Throwable {        testStatusCodeInternal(301, 304, true);    }    @LargeTest    public void test_005_4xxStatusCodes() throws Throwable {        testStatusCodeInternal(400, 417, false);    }    @LargeTest    public void test_006_5xxStatusCodes() throws Throwable {        testStatusCodeInternal(500, 505, false);    }    @LargeTest    public void test_008_StatusCode411Negative() throws Throwable {        String RESOURCE_URI = "asimov_it_negative_testStatusCode411Negative";        String uri = createTestResourceUri(RESOURCE_URI);        HttpRequest request = createRequest().setUri(uri)                .setMethod(HttpPost.METHOD_NAME)                .addHeaderField("X-OC-ContentEncoding", "identity")                .getRequest();        try {            HttpResponse response;            for (int i = 0; i < 4; i++) {                response = checkMiss(request, i + 1, HttpStatus.SC_LENGTH_REQUIRED, null);                logSleeping(MIN_RMP_PERIOD - response.getDuration());            }        } finally {            PrepareResourceUtil.prepareResource(uri, false);        }    }    private final String uri1 = createTestResourceUri("production_asimov_it_cv_temp_rmp");    private final String uri2 = createTestResourceUri("production_asimov_it_cv_temp_rmp_ttl");    private final HttpRequest request = createRequest().setUri(uri1)            .setMethod("GET")            .addHeaderField("X-OC-ContentEncoding", "identity").getRequest();    private final static int NON_HIT_INTERVAL = 31 * 1000;    @LargeTest    public void test_009_TempRmp() throws Throwable {        PrepareResourceUtil.prepareResource(uri1, false);        HttpResponse response;        try {            for (int i = 1; i <= 3; i++) {                // 1.1 - 1.3 from network                response = checkMiss(request, i);                logSleeping(MIN_NON_RMP_PERIOD - response.getDuration());            }            // 1.4 from cache            checkHit(request, 4);            long start = System.currentTimeMillis();            logSleeping(NON_HIT_INTERVAL);            // 1.5 - 1.6 from network. Temporary RMP should be detected 0n 1.6            for (int i = 5; i <= 6; i++) {                response = checkMiss(request, i);                logSleeping(MIN_RMP_PERIOD - response.getDuration());            }            // 1.7 from cache according to temp RMP            checkHit(request, 7);            logSleeping(MIN_NON_RMP_PERIOD - (System.currentTimeMillis() - start));            // from cache according to ordinary pattern            checkHit(request, 8);        } finally {            PrepareResourceUtil.prepareResource(uri1, true);        }    }    @LargeTest    public void test_010_TempRmpTtl() throws Throwable {        Thread.currentThread().setName("1");        PrepareResourceUtil.prepareResource(uri2, false);        request.setUri(uri2);        HttpResponse response;        int requestId = 0;        try {            for (int i = 1; i <= 3; i++) {                // 1.1 - 1.3 from network                response = checkMiss(request, ++requestId);                logSleeping(MIN_NON_RMP_PERIOD - response.getDuration());            }            for (int i = 4; i <= 11; i++) {                // 1.4 - 1.11 from cache                response = checkHit(request, ++requestId);                if (requestId == 4 || requestId == 8)                    startTempRmp(requestId == 4 ? 2 : 3, request);                logSleeping(MIN_NON_RMP_PERIOD - response.getDuration());            }            // 1.12 from cache            response = checkHit(request, ++requestId);            logSleeping(MIN_NON_RMP_PERIOD - response.getDuration());            try {                TimeSetterUtil.setSystemTimeAndWaitFor(System.currentTimeMillis() + TimeSetterUtil.MS_IN_DAY * 2);// Expire ordinary polling subscription                checkMiss(request, ++requestId);            } finally {                TimeSetterUtil.setSystemTimeAndWaitFor(System.currentTimeMillis() - TimeSetterUtil.MS_IN_DAY * 2);            }        } finally {            PrepareResourceUtil.prepareResource(uri2, true);        }    }    /**     * IGNORED: Due to current logic of OC polling with status code 100 Continue does not support it     */    @Deprecated    @LargeTest    @Ignore    public void test_011_StatusCode100GA() throws Throwable {        checkStatusCode(100, true);    }    @LargeTest    public void test_012_StatusCode300GA() throws Throwable {        checkStatusCode(300, true);    }    @LargeTest    public void test_013_RapidPollTTL210() throws Exception {        String RESOURCE_URI11 = "asimov_it_rapid_cache11";        checkRapidPollTTL(RESOURCE_URI11, 210000L);    }    @LargeTest    public void test_014_RapidPollTTL240() throws Exception {        String RESOURCE_URI12 = "asimov_it_rapid_cache12";        checkRapidPollTTL(RESOURCE_URI12, 240000L);    }    @LargeTest    public void test_015_RapidPollTTL270() throws Exception {        String RESOURCE_URI13 = "asimov_it_rapid_cache13";        checkRapidPollTTL(RESOURCE_URI13, 270000L);    }    @LargeTest    public void test_016_RapidPollTTL300() throws Exception {        String RESOURCE_URI14 = "asimov_it_rapid_cache14";        checkRapidPollTTL(RESOURCE_URI14, 300000L);    }    @LargeTest    public void test_017_RapidPollTTL330() throws Exception {        String resourceUri = "asimov_it_rapid_cache15";        final long requestInterval = 55000L;        String uri = createTestResourceUri(resourceUri);        PrepareResourceUtil.prepareResource(uri, false);        int requestId = 0;        try {            HttpRequest request = createRequest().setUri(uri).setMethod("GET")                    .addHeaderField("X-OC-ContentEncoding", "identity")                    .getRequest();            // 0.1            HttpResponse response = checkMiss(request, ++requestId,                    VALID_RESPONSE);            logSleeping(requestInterval - response.getDuration());            // 0.2            response = checkMiss(request, ++requestId, VALID_RESPONSE);            logSleeping(requestInterval - response.getDuration());            // 0.3            response = checkMiss(request, ++requestId, VALID_RESPONSE);            logSleeping(requestInterval - response.getDuration());            // 0.4            response = checkHit(request, ++requestId, VALID_RESPONSE);            logSleeping(2L * requestInterval - response.getDuration());            // 0.5            response = checkHit(request, ++requestId, VALID_RESPONSE);            logSleeping(2L * requestInterval - response.getDuration());            // 0.6            response = checkHit(request, ++requestId, VALID_RESPONSE);            logSleeping(2L * requestInterval - response.getDuration());            // 0.7            response = checkMiss(request, ++requestId, VALID_RESPONSE);            logSleeping(requestInterval - response.getDuration());            // 0.8            checkHit(request, ++requestId, VALID_RESPONSE);        } finally {            PrepareResourceUtil.prepareResource(uri, true);        }    }}