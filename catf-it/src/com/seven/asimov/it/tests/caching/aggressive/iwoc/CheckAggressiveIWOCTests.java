package com.seven.asimov.it.tests.caching.aggressive.iwoc;import android.test.suitebuilder.annotation.LargeTest;import com.seven.asimov.it.annotation.DeviceOnly;import com.seven.asimov.it.testcases.IWOCTestCase;@DeviceOnlypublic class CheckAggressiveIWOCTests extends IWOCTestCase{    private static final String IWOC_0_RI_SCREEN_ON_RADIO_UP = "iwoc_0_ri_screen_on_radio_up";    private static final String IWOC_0_RI_SCREEN_ON_RADIO_DOWN = "iwoc_0_ri_screen_on_radio_down";    private static final String IWOC_0_RI_SCREEN_OFF_RADIO_UP = "iwoc_0_ri_screen_off_radio_up";    private static final String IWOC_0_RI_SCREEN_OFF_RADIO_DOWN = "iwoc_0_ri_screen_off_radio_down";    private static final String IWOC_0_LP_SCREEN_OFF_RADIO_DOWN = "iwoc_0_lp_screen_off_radio_down";    private static final String IWOC_0_LP_SCREEN_OFF_RADIO_UP = "iwoc_0_lp_screen_off_radio_up";    private static final String IWOC_0_LP_SCREEN_ON_RADIO_DOWN = "iwoc_0_lp_screen_on_radio_down";    private static final String IWOC_0_LP_SCREEN_ON_RADIO_UP = "iwoc_0_lp_screen_on_radio_up";    private static final String IWOC_1_RI_SCREEN_ON_RADIO_UP = "iwoc_1_ri_screen_on_radio_up";    private static final String IWOC_1_RI_SCREEN_ON_RADIO_DOWN = "iwoc_1_ri_screen_on_radio_down";    private static final String IWOC_1_RI_SCREEN_OFF_RADIO_UP = "iwoc_1_ri_screen_off_radio_up";    private static final String IWOC_1_RI_SCREEN_OFF_RADIO_DOWN = "iwoc_1_ri_screen_off_radio_down";    private static final String IWOC_1_LP_SCREEN_OFF_RADIO_DOWN = "iwoc_1_lp_screen_off_radio_down";    private static final String IWOC_1_LP_SCREEN_OFF_RADIO_UP = "iwoc_1_lp_screen_off_radio_up";    private static final String IWOC_1_LP_SCREEN_ON_RADIO_DOWN = "iwoc_1_lp_screen_on_radio_down";    private static final String IWOC_1_LP_SCREEN_ON_RADIO_UP = "iwoc_1_lp_screen_on_radio_up";    private static final String IWOC_2_RI_SCREEN_ON_RADIO_UP = "iwoc_2_ri_screen_on_radio_up";    private static final String IWOC_2_RI_SCREEN_ON_RADIO_DOWN = "iwoc_2_ri_screen_on_radio_down";    private static final String IWOC_2_RI_SCREEN_OFF_RADIO_UP = "iwoc_2_ri_screen_off_radio_up";    private static final String IWOC_2_RI_SCREEN_OFF_RADIO_DOWN = "iwoc_2_ri_screen_off_radio_down";    private static final String IWOC_2_LP_SCREEN_OFF_RADIO_DOWN = "iwoc_2_lp_screen_off_radio_down";    private static final String IWOC_2_LP_SCREEN_OFF_RADIO_UP = "iwoc_2_lp_screen_off_radio_up";    private static final String IWOC_2_LP_SCREEN_ON_RADIO_DOWN = "iwoc_2_lp_screen_on_radio_down";    private static final String IWOC_2_LP_SCREEN_ON_RADIO_UP = "iwoc_2_lp_screen_on_radio_up";    private static final String IWOC_3_RI_SCREEN_ON_RADIO_UP = "iwoc_3_ri_screen_on_radio_up";    private static final String IWOC_3_RI_SCREEN_ON_RADIO_DOWN = "iwoc_3_ri_screen_on_radio_down";    private static final String IWOC_3_RI_SCREEN_OFF_RADIO_UP = "iwoc_3_ri_screen_off_radio_up";    private static final String IWOC_3_RI_SCREEN_OFF_RADIO_DOWN = "iwoc_3_ri_screen_off_radio_down";    private static final String IWOC_3_LP_SCREEN_OFF_RADIO_DOWN = "iwoc_3_lp_screen_off_radio_down";    private static final String IWOC_3_LP_SCREEN_OFF_RADIO_UP = "iwoc_3_lp_screen_off_radio_up";    private static final String IWOC_3_LP_SCREEN_ON_RADIO_DOWN = "iwoc_3_lp_screen_on_radio_down";    private static final String IWOC_3_LP_SCREEN_ON_RADIO_UP = "iwoc_3_lp_screen_on_radio_up";    // 0 - regular behaviour, remote cache is retrieved on either radio up OR application request    /**     * <p>After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=0, screen ON and radio UP, for RI.</p>     * <p>A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p>Pattern [0,65,65,65,65]</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>After receiving of 3rd response polling should start.     * <li>4th request should be HITed.     * <li>INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.     * <li>After receiving of INVALIDATED_WO_CACHE, OC should immediately deactivate RR, but CE shouldnt be removed.     * <li>5th request should be sent to TC for server side revalidation..</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_RiScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_0_RI_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, false, true);    }    /**     * <p>After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=0, screen ON and radio DOWN, for RI.</p>     * <p>A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p>Pattern [0,65,65,65,65]</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>After receiving of 3rd response polling should start.     * <li>4th request should be HITed.     * <li>INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.     * <li>After receiving of INVALIDATED_WO_CACHE, OC should immediately deactivate RR, but CE shouldnt be removed.     * <li>5th request should be sent to TC for server side revalidation..</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_RiScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_0_RI_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, false, true);    }    /**     * <p>After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=0, screen OFF and radio UP, for RI.</p>     * <p>A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p>Pattern [0,65,65,65,65]</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>After receiving of 3rd response polling should start.     * <li>4th request should be HITed.     * <li>INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.     * <li>After receiving of INVALIDATED_WO_CACHE, OC should immediately deactivate RR, but CE shouldnt be removed.     * <li>5th request should be sent to TC for server side revalidation..</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_RiScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_0_RI_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, false, true);    }    /**     * <p>After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=0, screen OFF and radio DOWN, for RI.</p>     * <p>A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p>Pattern [0,65,65,65,65]</p>     * <p>The test is implemented as follows:</p>     * <ol>     * <li>After receiving of 3rd response polling should start.     * <li>4th request should be HITed.     * <li>INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.     * <li>After receiving of INVALIDATED_WO_CACHE, OC should immediately deactivate RR, but CE shouldnt be removed.     * <li>5th request should be sent to TC for server side revalidation..</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_RiScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_0_RI_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, false, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=0, screen ON and radio UP.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]</p>     * <p> Delay [95,95,95,95]</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_LpScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_0_LP_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, true, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=0, screen ON and radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]</p>     * <p> Delay [95,95,95,95]</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_LpScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_0_LP_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, true, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=0, screen OFF and radio UP.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]</p>     * <p> Delay [95,95,95,95]</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_LpScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_0_LP_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, true, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=0, screen OFF and radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]</p>     * <p> Delay [95,95,95,95]</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_0_LpScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_0_LP_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_0,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, true, true);    }    // 1 - remote cache is retrieved on Screen ON either radio up OR application request    /**     * <p> After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=1, screen ON for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.     * <li> 4th request should be HITed.     * <li> Connection to Relay should be closed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request. OC should immediately deactivate RR due to screen ON but CE shouldnt be removed.     * <li> 5th request should be sent to TC for server side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_RiScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_1_RI_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, false, true);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=1, screen ON for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.     * <li> 4th request should be HITed.     * <li> Connection to Relay should be closed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request. OC should immediately deactivate RR due to screen ON but CE shouldnt be removed.     * <li> 5th request should be sent to TC for server side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_RiScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_1_RI_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, false, true);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=1, screen OFF for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.     * <li> 4th request should be HITed.     * <li> Connection to Relay should be closed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request. OC should not deactivate RR.     * <li> 5th request should be sent to TC for server side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_RiScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_1_RI_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, false, false);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC immediately deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=1, screen OFF for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and     * another one for rest 1 requests</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.     * <li> 4th request should be HITed.     * <li> Connection to Relay should be closed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request. OC should not deactivate RR.     * <li> 5th request should be sent to TC for server side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_RiScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_1_RI_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, false, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR immediately     * in such cases: screen ON, no_cache_invalidate_aggressiveness=1.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95] </p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start.     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_LpScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_1_LP_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, true, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR immediately     * in such cases: screen ON, no_cache_invalidate_aggressiveness=1.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95] </p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start.     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_LpScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_1_LP_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, true, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR immediately     * in such cases: screen OFF, no_cache_invalidate_aggressiveness=1.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95] </p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start.     * <li> 3rd request should be HITed.     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_LpScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_1_LP_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR immediately     * in such cases: screen OFF, no_cache_invalidate_aggressiveness=1.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95] </p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start.</li>     * <li> 3rd request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.</li>     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_1_LpScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_1_LP_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_1,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> After sending of 5th request, OC should not deactivate RR.</li>     * <li> 5th request should be hit.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_RiScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_2_RI_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, false, true);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> After sending of 5th request, OC should immediately deactivate RR due to screen ON and, radio UP, but CE shouldnt be removed.</li>     * <li> 5th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_RiScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_2_RI_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, false, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> After sending of 5th request, OC should not deactivate RR.</li>     * <li> 5th request should be hit.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_RiScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_2_RI_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, false, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start.</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> After sending of 5th request, OC should not deactivate RR.</li>     * <li> 5th request should be hit.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_RiScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_2_RI_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, false, false);    }    // 2 - remote cache is retrieved on Screen ON and radio up (app requests ignored)    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen ON and radio UP.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]     * <p> Delay [95,95,95,95]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li>  Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and OC should deactivate RR, but CE shouldnt be removed.</li>     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_LpScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_2_LP_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, true, true);    }    // 2 - remote cache is retrieved on Screen ON and radio up (app requests ignored)    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]     * <p> Delay [95,95,95,95]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR.</li>     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_LpScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_2_LP_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]     * <p> Delay [95,95,95,95]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR.</li>     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_LpScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_2_LP_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC should not force-hit request and deactivate RR in such cases:     * no_cache_invalidate_aggressiveness=2, screen OFF or radio DOWN.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.     * <p> Pattern [0,100,100,100]     * <p> Delay [95,95,95,95]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR.</li>     * <li> 4th request should be sent to TC for server-side revalidation.</li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_2_LpScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_2_LP_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_2,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, true, false);    }    // 3 - completely ignore invalidates    /**     * <p> After receiving INVALIDATED_WO_CACHE OC shouldnt deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=3, screen ON and radio changed from DOWN to UP for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start (with hash H1).</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_RiScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_3_RI_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, false, false);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC shouldnt deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=3, screen ON and radio changed from DOWN to UP for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start (with hash H1).</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_RiScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_3_RI_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, false, false);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC shouldnt deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=3, screen ON and radio changed from DOWN to UP for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start (with hash H1).</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_RiScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_3_RI_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, false, false);    }    /**     * <p> After receiving INVALIDATED_WO_CACHE OC shouldnt deactivate RR after sending next request by APP in such cases:     * no_cache_invalidate_aggressiveness=3, screen ON and radio changed from DOWN to UP for RI.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 4 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,65,65,65,65]</p>     * <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 3rd response polling should start (with hash H1).</li>     * <li> 4th request should be HITed.</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5th request.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_RiScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_3_RI_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, false, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC shouldnt force-hit request and shouldnt deactivate RR     * in such cases: no_cache_invalidate_aggressiveness=3.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95]</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed. </li>     * <li> Connection to Relay should be closed, radio state should be DOWN. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_LpScreenOnRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_3_LP_SCREEN_ON_RADIO_UP, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_ON, RadioState.RADIO_UP, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC shouldnt force-hit request and shouldnt deactivate RR     * in such cases: no_cache_invalidate_aggressiveness=3.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95]</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed. </li>     * <li> Connection to Relay should be closed, radio state should be DOWN. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_LpScreenOnRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_3_LP_SCREEN_ON_RADIO_DOWN, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_ON, RadioState.RADIO_DOWN, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC shouldnt force-hit request and shouldnt deactivate RR     * in such cases: no_cache_invalidate_aggressiveness=3.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95]</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed. </li>     * <li> Connection to Relay should be closed, radio state should be DOWN. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_LpScreenOffRadioUp() throws Throwable {        checkAggressiveIWOC(IWOC_3_LP_SCREEN_OFF_RADIO_UP, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_OFF, RadioState.RADIO_UP, true, false);    }    /**     * <p> For LP after receiving INVALIDATED_WO_CACHE OC shouldnt force-hit request and shouldnt deactivate RR     * in such cases: no_cache_invalidate_aggressiveness=3.</p>     * <p> A test resource is needed for this test case that returns the same responses for first 3 requests, and another one for rest 1 requests.</p>     * <p> Pattern [0,100,100,100] </p>     * <p> Delay [95,95,95,95]</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).     * <li> 3rd request should be HITed. </li>     * <li> Connection to Relay should be closed, radio state should be DOWN. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response.</li>     * <li> During whole test OC shouldnt deactivate RR due to </li>     * </ol>     *     * @throws Throwable     */    @LargeTest    public void testAggressiveIWOC_3_LpScreenOffRadioDown() throws Throwable {        checkAggressiveIWOC(IWOC_3_LP_SCREEN_OFF_RADIO_DOWN, AGGRESSIVENESS_LEVEL_3,                ScreenState.SCREEN_OFF, RadioState.RADIO_DOWN, true, false);    }    // WARNING! MUST BE ALWAYS EXECUTED AT THE END OF SUITE!    @LargeTest    public void testAggressiveIWOC_Suite_Finish() throws Throwable {        cleanAggressivenessLevel();    }}