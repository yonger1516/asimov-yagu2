package com.seven.asimov.it.tests.caching.aggressive.iwoc;import android.test.suitebuilder.annotation.LargeTest;import com.seven.asimov.it.testcases.IWOCTestCase;public class CheckInvalidateWOCacheTests extends IWOCTestCase {    private static final String TAG = CheckInvalidateWOCacheTests.class.getSimpleName();    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li>  After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response  </li>     * <li>  Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed     * (with hash H1) and OC should deactivate RR, CE shouldnt be removed.</li>     * <li> 4th request should be sent to TC for server-side revalidation. </li>     * <li> 5th request should be HITed. </li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheLongPoll001() throws Throwable {        setDefaultAggressivenessProperty();        executeIWOCCacheTest(LP_REQUEST_INTERVAL_MS_IWOC, false, false, false);    }    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li>  After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response  </li>     * <li>  Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be     * force HITed (with hash H1) and OC should deactivate RR, CE shouldnt be removed.</li>     * <li> 4th request should be sent to TC for server-side revalidation. </li>     * <li>  5th request should be MISSed. </li>     * <li> 6th request should be HITed.</li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheLongPoll002() throws Throwable {        executeIWOCCacheTest(LP_REQUEST_INTERVAL_MS_IWOC, false, true, false);    }    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li>  After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response  </li>     * <li>  Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed     * (with hash H1) and OC should deactivate RR, CE shouldnt be removed. Pattern must be redetected</li>     * <li> 4th request should be sent to TC for server-side revalidation. </li>     * <li>  5th request should be HITed. </li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheLongPoll003() throws Throwable {        executeIWOCCacheTest(LP_REQUEST_INTERVAL_MS_LARGE, false, false, false);    }    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li>  After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response  </li>     * <li>  Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1)     * and OC should deactivate RR, CE shouldnt be removed. Pattern must be redetected </li>     * <li> 4th request should be sent to TC for server-side revalidation. </li>     * <li>  5th request should be MISSed. Patter detected </li>     * <li> 6th request should be HITed.</li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheLongPoll004() throws Throwable {        executeIWOCCacheTest(LP_REQUEST_INTERVAL_MS_LARGE, false, true, false);    }    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li>  After receiving of 2nd response polling should start (with hash H1).</li>     * <li> 3rd request should be HITed. </li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 3rd response  </li>     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1)     * and OC should deactivate RR, CE shouldnt be removed. Pattern must be redetected </li>     * <li> 4th request should be sent to TC for server-side revalidation. </li>     * <li>  5th request should be MISSed. Patter detected </li>     * <li> 6th request should be HITed. </li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheLongPoll005() throws Throwable {        executeIWOCCacheTest(LP_REQUEST_INTERVAL_MS_LARGE, false, false, true);    }    /**     <p> The test is implemented as follows:</p>     * <ol>     * <li> After receiving of 2nd response polling should start (with hash H1).</li>     * <li> INVALIDATED_WO_CACHE should be received from server via SMS before 5rd response  </li>     * <li> Immediately after receiving INVALIDATED_WO_CACHE 3rd response should be force HITed (with hash H1) and     * OC should deactivate RR, CE shouldnt be removed. Pattern must be redetected</li>     * <li> 7th request should be sent to TC for server-side revalidation. </li>     * <li> 8th request should be HITed. Pattern detected </li>     * </ol>     */    @LargeTest    public void testInvalidateWOCacheOrdinaryPoll006() throws Throwable {        executeIWOCCacheTest(RI_REQUEST_INTERVAL_MS_IWOC, true, false, false);    }}