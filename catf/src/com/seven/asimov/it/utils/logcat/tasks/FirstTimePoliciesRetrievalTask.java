package com.seven.asimov.it.utils.logcat.tasks;import android.util.Log;import com.seven.asimov.it.utils.date.DateUtil;import com.seven.asimov.it.utils.date.TimeZones;import com.seven.asimov.it.utils.logcat.wrappers.FirstTimePoliciesRetrievalWrapper;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import java.util.regex.Matcher;import java.util.regex.Pattern;public class FirstTimePoliciesRetrievalTask extends Task<FirstTimePoliciesRetrievalWrapper> {    private static final Logger logger = LoggerFactory.getLogger(FirstTimePoliciesRetrievalTask.class.getSimpleName());    private static final String PACKAGE_MANAGER_INITIALIZED_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Package manager initialized";    private static final Pattern packageManagerInitializedPattern = Pattern.compile(PACKAGE_MANAGER_INITIALIZED_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String STORAGE_POLICY_VERSION_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Storage policy version:.(.[0-9]*)";    private static final Pattern storagePolicyVersionPattern = Pattern.compile(STORAGE_POLICY_VERSION_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String DIFFIE_HELLMAN_REQUEST_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Sending an unauthenticated register Diffie-Hellman request.*hint.[0-9]*";    private static final Pattern diffieHellmanRequestPattern = Pattern.compile(DIFFIE_HELLMAN_REQUEST_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String DIFFIE_HELLMAN_RESPONSE_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Received an unauthenticated register Diffie-Hellman response.*hint.[0-9]*";    private static final Pattern diffieHellmanResponsePattern = Pattern.compile(DIFFIE_HELLMAN_RESPONSE_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String SENDING_A_POLICY_MGMT_DATA_REQUEST_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Sending a policy mgmt data request.*hint.[0-9]*";    private static final Pattern sendingPolicyMGMTdataRequestPattern = Pattern.compile(SENDING_A_POLICY_MGMT_DATA_REQUEST_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String LOCAL_POLICY_SERVER_POLICY_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Local policy hash.\\s?(-?[0-9]*),.server hash.\\s?(-?[0-9]*).*";    private static final Pattern localPolicyServerPolicyVersionPattern = Pattern.compile(LOCAL_POLICY_SERVER_POLICY_REGEXP, Pattern.CASE_INSENSITIVE);    private static final String RECEIVED_POLICY_MGMT_SERVER_RESPONCE_REGEXP = "(201[2-9]/[0-9]*/[0-9]*\\s[0-9]*\\:[0-9]*\\:[0-9]*\\.[0-9]*).([A-Z]*).*Received a policy mgmt data.*hint.[0-9]*";    private static final Pattern receivedPolicyMGMTServerResponcePattern = Pattern.compile(RECEIVED_POLICY_MGMT_SERVER_RESPONCE_REGEXP, Pattern.CASE_INSENSITIVE);    private static FirstTimePoliciesRetrievalWrapper wrapper = new FirstTimePoliciesRetrievalWrapper();    @Override    protected FirstTimePoliciesRetrievalWrapper parseLine(String line) {        Matcher matcher1 = packageManagerInitializedPattern.matcher(line);        Matcher matcher2 = storagePolicyVersionPattern.matcher(line);        Matcher matcher3 = diffieHellmanRequestPattern.matcher(line);        Matcher matcher4 = diffieHellmanResponsePattern.matcher(line);        Matcher matcher5 = sendingPolicyMGMTdataRequestPattern.matcher(line);        Matcher matcher6 = localPolicyServerPolicyVersionPattern.matcher(line);        Matcher matcher7 = receivedPolicyMGMTServerResponcePattern.matcher(line);        if (matcher1.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher1, 1));            return wrapper;        }        if (matcher2.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher2, 2));            wrapper.setPolicyStorageVersion(Long.parseLong(matcher2.group(3)));            return wrapper;        }        if (matcher3.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher3, 3));            return wrapper;        }        if (matcher4.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher4, 4));            return wrapper;        }        if (matcher5.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher5, 5));            return wrapper;        }        if (matcher6.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher6, 6));            wrapper.setLocalPolicyHash(Long.parseLong(matcher6.group(3)));            wrapper.setServerPolicyHash(Long.parseLong(matcher6.group(4)));            return wrapper;        }        if (matcher7.find()) {            wrapper.setTimestamp(setTimestampForCurrentMatcher(matcher7, 7));            return wrapper;        }        return wrapper;    }    private long setTimestampForCurrentMatcher(Matcher matcher, int number) {        int hour = 0;        try {            hour = TimeZones.valueOf(matcher.group(2)).getId();        } catch (Exception e) {            logger.error(e.getMessage());        }        long timestamp = DateUtil.format(matcher.group(1).replaceAll("/", "-")) + hour * 3600 * 1000;        wrapper.getTimestamps()[number] = timestamp;        return timestamp;    }    public void cleanWrapper() {        wrapper = new FirstTimePoliciesRetrievalWrapper();    }}